#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright (C) 2018 Takashi Sakamoto

from hinawa_utils.misc.cui_kit import CuiKit
from hinawa_utils.tscm.tscm_rack_unit import TscmRackUnit

def handle_clock_source(unit, args):
    ops = ('set', 'get')
    if len(args) > 0 and args[0] in ops:
        op = args[0]
        if op == ops[0] and len(args) == 2:
            if unit.get_property('streaming'):
                print('Packet streaming started.')
                return False
            source = args[1]
            unit.set_clock_source(source)
        else:
            print(unit.get_clock_source())
        return True
    print('Arguments for clock-source command:')
    print('  clock-source OP [SRC]')
    print('    OP:     [{0}]'.format('|'.join(ops)))
    print('    SRC:    [{0}]'.format('|'.join(unit.supported_clock_sources)))
    return False

def handle_sampling_rate(unit, args):
    ops = ('set', 'get')
    if len(args) > 0 and args[0] in ops:
        op = args[0]
        if op == ops[0] and len(args) == 2:
            rate = int(args[1])
            unit.set_sampling_rate(rate)
        else:
            print(unit.get_sampling_rate())
        return True
    print('Arguments for sampling-rate command:')
    print('  sampling-rate OP [RATE]')
    print('    OP:     [{0}]'.format('|'.join(ops)))
    rates = [str(r) for r in unit.supported_sampling_rates]
    print('    RATE:   [{0}]'.format('|'.join(rates)))
    return False

def handle_firmware_versions(unit, args):
    info = unit.get_firmware_versions()
    for name, value in info.items():
        print('{0}: {1}'.format(name, value))
    return True

def handle_coax_src(unit, args):
    ops = ('set', 'get')
    if len(args) > 0 and args[0] in ops:
        op = args[0]
        if op == ops[0] and len(args) == 2:
            rate = args[1]
            unit.set_coaxial_source(rate)
        else:
            print(unit.get_coaxial_source())
        return True
    print('Arguments for coaxial-source command:')
    print('  coaxial-source OP [RATE]')
    print('    OP:     [{0}]'.format('|'.join(ops)))
    print('    RATE:   [{0}]'.format('|'.join(unit.supported_coax_sources)))
    return False

def handle_monitor_input(unit, args):
    _OPS = ('set', 'get')
    _ITEMS = {
        'gain':     (unit.set_gain,     unit.get_gain),
        'mute':     (unit.set_mute,     unit.get_mute),
        'balance':  (unit.set_balance,  unit.get_balance),
    }
    labels = unit.get_channel_labels()

    if len(args) >= 1 and args[0] in labels:
        ch = args[0]
        if len(args) >= 2 and args[1] in _ITEMS:
            item = args[1]
            set_func, get_func = _ITEMS[item]
            if len(args) >= 3 and args[2] in _OPS:
                op = args[2]
                if len(args) >= 4 and op == 'set':
                    val = None
                    if item == 'gain':
                        val = float(args[3])
                    elif item == 'mute':
                        val = bool(int(args[3]))
                    elif item == 'balance':
                        val = int(args[3])
                    if val != None:
                        set_func(ch, val)
                        return True
                elif op == 'get':
                    print(get_func(ch))
                    return True
    print('Arguments for monitor-input command:')
    print('  monitor-input CH ITEM OP [dB|MUTE|BALANCE]')
    print('    CH:     [{0}]'.format('|'.join(labels)))
    print('    ITEM:   [{0}]'.format('|'.join(_ITEMS)))
    print('    OP:     [set|get]')
    print('    dB:     [0-99] (percentage) if OP=set')
    print('    MUTE:   [0|1] if OP=set')
    print('    BALANCE:[0-99] (left-to-right, percentage) if OP=set')
    return False

cmds = {
    'clock-source':         handle_clock_source,
    'sampling-rate':        handle_sampling_rate,
    'firmware-versions':    handle_firmware_versions,
    'coaxial-source':       handle_coax_src,

    'monitor-input':        handle_monitor_input,
}

fullpath = CuiKit.seek_snd_unit_path()
if fullpath:
    unit = TscmRackUnit(fullpath)
    CuiKit.dispatch_command(unit, cmds)
