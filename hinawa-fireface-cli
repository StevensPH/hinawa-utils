#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright (C) 2018 Takashi Sakamoto

from hinawa_utils.misc.cui_kit import CuiKit
from hinawa_utils.fireface.ff_unit import FFUnit

def handle_status(unit, args):
    print('Model name: {0}'.format(unit.get_model_name()))

    print('Current configuration:')
    for target in unit.get_single_option_labels():
        print('  {0}'.format(target))
        for item in unit.get_single_option_item_labels(target):
            print('    {0}: {1}'.format(item, unit.get_single_option(target, item)))
    for target in unit.get_multiple_option_labels():
        print('  {0}: {1}'.format(target, unit.get_multiple_option(target)))

    print('Sync status:')
    for key, val in unit.get_sync_status().items():
        if isinstance(val, dict):
            print('  {0}:'.format(key))
            for name, state in val.items():
                print('    {0}: {1}'.format(name, state))
        else:
            print('  {0}: {1}'.format(key, val))

    return True

def handle_multiple_option(unit, args):
    ops = ('set', 'get')
    targets = unit.get_multiple_option_labels()
    if len(args) >= 2 and args[0] in targets and args[1] in ops:
        target = args[0]
        op = args[1]
        vals = unit.get_multiple_option_value_labels(target)
        if op == 'set' and len(args) >= 3 and args[2] in vals:
            val = args[2]
            unit.set_multiple_option(target, val)
            return True
        elif op == 'get':
            print(unit.get_multiple_option(target))
            return True

    print('Arguments for multiple-option command:')
    print('  multiple-option TARGET OP [ITEM]')
    print('    TARGET: [{0}]'.format('|'.join(targets)))
    print('    OP      [{0}]'.format('|'.join(ops)))
    for target in targets:
        vals = unit.get_multiple_option_value_labels(target)
        print('    ITEM    [{0}] if TARGET={1} and OP=set'.format('|'.join(vals), target))
    return False

def handle_single_option(unit, args):
    ops = ('set', 'get')
    targets = unit.get_single_option_labels()
    if len(args) >= 1 and args[0] in targets:
        target = args[0]
        items = unit.get_single_option_item_labels(target)
        if len(args) >= 3 and args[1] in items and args[2] in ops:
            item = args[1]
            op = args[2]
            if op == 'set' and len(args) >= 4:
                enable = True if args[3] == '1' else False
                unit.set_single_option(target, item, enable)
                return True
            elif op == 'get':
                print(unit.get_single_option(target, item))
                return True
    print('Arguments for single-option command:')
    print('  single-option TARGET ITEM OP [ENABLE]')
    print('    TARGET: [{0}]'.format('|'.join(targets)))
    for target in targets:
        items = unit.get_single_option_item_labels(target)
        print('    ITEM    [{0}] if TARGET={1}'.format('|'.join(items), target))
    print('    OP      [{0}]'.format('|'.join(ops)))
    print('    ENABLE: [0|1]')
    return False


cmds = {
    'status':           handle_status,
    'multiple-option':  handle_multiple_option,
    'single-option':   handle_single_option,
}

fullpath = CuiKit.seek_snd_unit_path()
if fullpath:
    unit = FFUnit(fullpath)
    CuiKit.dispatch_command(unit, cmds)
