#!/usr/bin/env python3

import sys

from bebob.yamaha_go import YamahaGo

def handle_current_status(unit, args):
    print('Current status:')
    print('  Packet Streaming:')
    print('    started:          {0}'.format(unit.get_property('streaming')))
    rate = unit.get_sampling_rate()
    print('    sampling-rate:    {0}'.format(rate))
    print('Output settings:')
    if len(unit.get_output_labels()) > 0:
        print('  Ports:')
        for output in unit.get_output_labels():
            print('    {0}'.format(output))
            for i in range(2):
                gain = unit.get_output('volume', output, i)
                mute = unit.get_output('mute', output, i)
                print('      gain: {0}, mute: {1}'.format(gain, mute))
    print('  Routing:')
    for sink in unit.get_output_sink_labels():
        print('    {0}: {1}'.format(sink, unit.get_output_source(sink)))
    print('Mixer inputs:')
    for input in unit.get_mixer_input_labels():
        print('  {0}:'.format(input))
        for i in range(2):
            gain = unit.get_mixer_input('volume', input, i)
            mute = unit.get_mixer_input('mute', input, i)
            print('    gain: {0}, mute: {1}'.format(gain, mute))
    print('Mixer output:')
    for i in range(2):
        gain = unit.get_mixer_output('volume', i)
        mute = unit.get_mixer_output('mute', i)
        print('  gain: {0}, mute: {1}'.format(gain, mute))

def handle_firmware_info(unit, args):
    print('BeBoB firmware information:')
    for category, values in unit.firmware_info.items():
        if isinstance(values, dict):
            print('  {0}:'.format(category))
            for name, value in values.items():
                print('    {0}: {1}'.format(name, value))
        else:
            print('  {0}: {1}'.format(category, values))

def handle_input_level(unit, args):
    ops = ('set', 'get')
    if len(unit.get_input_level_labels()) == 0:
        print('Not supported')
        return False
    if len(args) > 0 and args[0] in ops:
        op = args[0]
        if op == ops[0] and len(args) == 2:
            level = args[1]
            unit.set_input_level(level)
        else:
            print(unit.get_input_level())
        return True
    print('Arguments for input command:')
    print('  output OPERATION [LEVEL]')
    print('    OPERATION: {0}'.format(', '.join(ops)))
    print('    LEVEL:     {0}'.format(', '.join(
                                            unit.get_input_level_labels())))
    return False

def handle_analog_output(unit, args):
    if len(unit.get_output_labels()) == 0:
        print('Not supported')
        return False
    if len(args) > 2 and args[0] in unit.channel_ops:
        op = args[0]
        pair = args[1]
        ch = int(args[2])
        if op == unit.channel_ops[0] and len(args) == 4:
            value = int(args[3])
            unit.set_output(op, pair, ch, value)
        else:
            print(unit.get_output(op, pair, ch))
        return True
    print('Arguments for output command:')
    print('  output OPERATION PAIR CHANNEL [VALUE]')
    print('    OPERATION: {0}'.format(', '.join(unit.channel_ops)))
    print('    PAIR:      {0}'.format(', '.join(unit.get_output_labels())))
    print('    CHANNEL:   1, 2 (0 = both)')
    print('    VALUE:     {0}'.format(0))
    return False

def handle_output_source(unit, args):
    ops = ('set', 'get')
    if len(args) > 1 and args[0] in ops:
        output = args[1]
        if args[0] == ops[0] and len(args) == 3:
            src = args[2]
            unit.set_output_source(output, src)
        else:
            print(unit.get_output_source(output))
        return True
    print('Arguments for output-source command:')
    print('  output-source OPERATION OUTPUT [SOURCE]')
    print('    OPERATION: {0}'.format(', '.join(ops)))
    print('    OUTPUT:    {0}'.format(', '.join(unit.get_output_sink_labels())))
    print('    SOURCE:    {0}'.format(', '.join(
                                            unit.get_output_source_labels())))
    return False

def handle_mixer_input(unit, args):
    if len(args) > 2 and args[0] in unit.channel_ops:
        op = args[0]
        input = args[1]
        ch = int(args[2])
        if len(args) == 4:
            value = int(args[3])
            unit.set_mixer_input(op, input, ch, value)
        else:
            print(unit.get_mixer_input(op, input, ch))
        return True
    print('Arguments for mixer-input command:')
    print('  mixer-input OPERATION INPUT CHANNEL [VALUE]')
    print('    OPERATION: {0}'.format(', '.join(unit.channel_ops)))
    print('    INPUT:     {0}'.format(', '.join(unit.get_mixer_input_labels())))
    print('    CHANNEL:   {0}'.format(0))
    print('    VALUE:     {0}'.format(0))
    return False

def handle_mixer_output(unit, args):
    if len(args) > 1 and args[0] in unit.channel_ops:
        op = args[0]
        ch = int(args[1])
        if len(args) == 3:
            value = int(args[2])
            unit.set_mixer_output(op, ch, value)
        else:
            print(unit.get_mixer_output(op, ch))
        return True
    print('Arguments for mixer-output command:')
    print('  mixer-output OPERATION CHANNEL [VALUE]')
    print('    OPERATION: {0}'.format(', '.join(unit.channel_ops)))
    print('    CHANNEL:   1, 2 (0 = both)')
    print('    VALUE:     ')
    return False

def handle_sampling_rate(unit, args):
    ops = ('set', 'get')
    if len(args) > 0 and args[0] in ops:
        if args[0] == ops[0] and len(args) == 2:
            if unit.get_property('streaming'):
                print('Packet streaming started.')
                return False
            rate = int(args[1])
            unit.set_sampling_rate(rate)
        else:
            print(unit.get_sampling_rate())
        return True
    print('Arguments for sampling-rate command:')
    print('  sampling-rate OPERATION [RATE]')
    print('    OPERATION: {0}'.format(', '.join(ops)))
    print('    RATE:      {0}'.format(', '.join(
                                    map(str, unit.get_sampling_rate_labels()))))
    return False

def handle_clock_source(unit, args):
    ops = ('set', 'get')
    if len(args) > 0 and args[0] in ops:
        if args[0] == ops[0] and len(args) == 2:
            if unit.get_property('streaming'):
                print('Packet streaming started.')
                return False
            source = args[1]
            unit.set_clock_source(source)
        else:
            print(unit.get_clock_source())
        return True
    print('Arguments for clock-source command:')
    print('  clock-source OPERATION [SOURCE]')
    print('    OPERATION: {0}'.format(', '.join(ops)))
    print('    SOURCE:    {0}'.format(', '.join(
                                            unit.get_clock_source_labels())))
    return False

cmds = {
    'current-status':   handle_current_status,
    'firmware-info':    handle_firmware_info,
    'input-level':      handle_input_level,
    'analog-output':    handle_analog_output,
    'output-source':    handle_output_source,
    'mixer-input':      handle_mixer_input,
    'mixer-output':     handle_mixer_output,
    'sampling-rate':    handle_sampling_rate,
    'clock-source':     handle_clock_source,
}

def dump_commands():
    print('Available commands:')
    for name in cmds.keys():
        print('  {0}'.format(name))

# Main routine
argv = sys.argv
if len(argv) < 2:
    print('help')
    sys.exit()
card = argv[1]

unit = YamahaGo('/dev/snd/hwC{0}D0'.format(card))
if len(argv) < 3:
    dump_commands()
    sys.exit()
cmd = argv[2]

if cmd in cmds:
    cmds[cmd](unit, argv[3:])
else:
    dump_commands()
