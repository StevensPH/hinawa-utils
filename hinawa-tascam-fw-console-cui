#!/usr/bin/env python3

from misc.cui_kit import CuiKit
from tscm.tscm_console_unit import TscmConsoleUnit

def handle_clock_source(unit, args):
    ops = ('set', 'get')
    if len(args) > 0 and args[0] in ops:
        op = args[0]
        if op == ops[0] and len(args) == 2:
            if unit.get_property('streaming'):
                print('Packet streaming started.')
                return False
            source = args[1]
            unit.set_clock_source(source)
        else:
            print(unit.get_clock_source())
        return True
    print('Arguments for clock-source command:')
    print('  clock-source OP [SRC]')
    print('    OP:     [{0}]'.format('|'.join(ops)))
    print('    SRC:    [{0}]'.format('|'.join(unit.supported_clock_sources)))
    return False

def handle_sampling_rate(unit, args):
    ops = ('set', 'get')
    if len(args) > 0 and args[0] in ops:
        op = args[0]
        if op == ops[0] and len(args) == 2:
            rate = int(args[1])
            unit.set_sampling_rate(rate)
        else:
            print(unit.get_sampling_rate())
        return True
    print('Arguments for sampling-rate command:')
    print('  sampling-rate OP [RATE]')
    print('    OP:     [{0}]'.format('|'.join(ops)))
    rates = [str(r) for r in unit.supported_sampling_rates]
    print('    RATE:   [{0}]'.format('|'.join(rates)))
    return False

def handle_firmware_versions(unit, args):
    info = unit.get_firmware_versions()
    for name, value in info.items():
        print('{0}: {1}'.format(name, value))
    return True

def handle_master_fader(unit, args):
    ops = ('set', 'get')
    if len(args) > 0 and args[0] in ops:
        op = args[0]
        if op == ops[0] and len(args) == 2:
            mode = int(args[1])
            unit.set_master_fader(mode)
        else:
            print(unit.get_master_fader())
        return True
    print('Arguments for master-fader command:')
    print('  master-fader OP [MODE]')
    print('    OP:     [{0}]'.format('|'.join(ops)))
    print('    MODE:   [0|1]')
    return False

def handle_coax_src(unit, args):
    ops = ('set', 'get')
    if len(args) > 0 and args[0] in ops:
        op = args[0]
        if op == ops[0] and len(args) == 2:
            rate = args[1]
            unit.set_coaxial_source(rate)
        else:
            print(unit.get_coaxial_source())
        return True
    print('Arguments for coaxial-source command:')
    print('  coaxial-source OP [RATE]')
    print('    OP:     [{0}]'.format('|'.join(ops)))
    print('    RATE:   [{0}]'.format('|'.join(unit.supported_coax_sources)))
    return False

def handle_bright_led(unit, args):
    if len(args) > 1:
        pos = int(args[0])
        state = args[1]
        unit.bright_led(pos, state)
        return True
    print('Arguments for coaxial-source command:')
    print('  coaxial-source POS STATE')
    print('    POS:    [0-???]')
    print('    STATE:  [{0}]'.format('|'.join(unit.supported_led_status)))
    return False

cmds = {
    'clock-source':         handle_clock_source,
    'sampling-rate':        handle_sampling_rate,
    'firmware-versions':    handle_firmware_versions,
    'coaxial-source':       handle_coax_src,

    'master-fader':         handle_master_fader,
    'bright-led':           handle_bright_led,
}

fullpath = CuiKit.seek_snd_unit_path()
if fullpath:
    unit = TscmConsoleUnit(fullpath)
    CuiKit.dispatch_command(unit, cmds)
