#!/usr/bin/env python3

import sys

from bebob.bebob_maudio import BebobMaudio

def handle_input(unit, args):
    ops = {
        'volume':   (unit.set_input_volume, unit.get_input_volume),
        'mute':     (unit.set_input_mute, unit.get_input_mute),
    }
    if len(args) > 2:
        input = args[0]
        operation = args[1]
        ch = int(args[2])
        if input in unit.get_input_labels() and operation in ops and \
           ch < 3:
            if len(args) == 4:
                value = int(args[3])
                ops[operation][0](input, ch, value)
            else:
                print(ops[operation][1](input, ch))
            return True
    print('Arguments for input command:')
    print('  target:    [{0}]'.format((', ').join(unit.get_input_labels())))
    print('  operation: [{0}]'.format((', ').join(ops)))
    print('  ch:        [0, 1]')
    print('  value:     []')
    return False

def handle_aux_input(unit, args):
    ops = {
        'volume':   (unit.set_aux_input_volume, unit.get_aux_input_volume),
        'mute':     (unit.set_aux_input_mute, unit.get_aux_input_mute),
    }
    if len(unit.get_aux_input_labels()) == 0:
        print('Not supported')
        return False
    if len(args) > 2:
        aux_input = args[0]
        operation = args[1]
        ch = int(args[2])
        if aux_input in unit.get_aux_input_labels() and operation in ops and \
           ch < 3:
            if len(args) == 4:
                value = int(args[3])
                ops[operation][0](aux_input, ch, value)
            else:
                print(ops[operation][1](aux_input, ch))
            return True
    print('Arguments for aux-input command:')
    print('  target:    [{0}]'.format((', ').join(unit.get_aux_input_labels())))
    print('  operation: [{0}]'.format((', ').join(ops)))
    print('  ch:        [0, 1]')
    print('  value:     []')
    return False

def handle_aux_output(unit, args):
    ops = {
        'volume':   (unit.set_aux_master_volume, unit.get_aux_master_volume),
        'mute':     (unit.set_aux_master_mute, unit.get_aux_master_mute),
    }
    if len(unit.get_aux_input_labels()) == 0:
        print('Not supported')
        return False
    if len(args) > 1:
        operation = args[0]
        ch = int(args[1])
        if operation in ops and ch < 3:
            if len(args) == 3:
                value = int(args[2])
                ops[operation][0](ch, value)
            else:
                print(ops[operation][1](ch))
            return True
    print('Arguments for aux-output command:')
    print('  operation: [{0}]'.format(', '.join(ops)))
    print('  ch:        [0, 1]')
    print('  value:     []')
    return False

def handle_mixer_routing(unit, args):
    if len(args) > 1:
        sink = args[0]
        source = args[1]
        if sink in unit.get_mixer_sink_labels() and \
           source in unit.get_mixer_source_labels():
            if len(args) == 3:
                if int(args[2]) > 0:
                    value = 0x0000
                else:
                    value = 0x8000
                unit.set_mixer_routing(source, sink, value)
            else:
                value = unit.get_mixer_routing(source, sink)
                if value > 0x0000:
                    print(0)
                else:
                    print(1)
            return True
    print('Arguments for mixer-routing command:')
    print('  mixer-routing [sink] [source] [value]:')
    for sink in unit.get_mixer_sink_labels():
        print('    {0} [{1}] [0, 1]'.format(
            sink, ', '.join(unit.get_mixer_source_labels())
        ))
    return False

def handle_output(unit, args):
    ops = {
        'volume':   (unit.set_output_volume, unit.get_output_volume),
        'mute':     (unit.set_output_mute,   unit.get_output_mute),
    }
    if len(args) > 2:
        output = args[0]
        operation = args[1]
        ch = int(args[2])
        if output in unit.get_output_labels() and operation in ops and ch < 3:
            if len(args) == 4:
                value = int(args[3])
                ops[operation][0](output, ch, value)
            else:
                print(ops[operation][1](output, ch))
            return True
    print('Arguments for output command:')
    print('  target:    [{0}]'.format((', ').join(unit.get_output_labels())))
    print('  operation: [{0}]'.format((', ').join(ops)))
    print('  ch:        [0, 1]')
    print('  value:     []')
    return False

def handle_output_source(unit, args):
    if len(args) > 0:
        output = args[0]
        if output in unit.get_output_labels():
            if len(args) == 2 and \
               args[1] in unit.get_output_source_labels(output):
                source = args[1]
                unit.set_output_source(output, source)
            else:
                print(unit.get_output_source(output))
            return True
    print('Arguments for output-source command:')
    print('  output-source [output] [source]')
    for output in unit.get_output_labels():
        sources = unit.get_output_source_labels(output)
        if len(sources) > 1:
            print('    {0} [{1}]'.format(output, ', '.join(sources)))
        else:
            print('    {0} [{1} (fixed)]'.format(output, sources[0]))
    return False

def handle_headphone(unit, args):
    ops = {
        'volume':   (unit.set_headphone_volume, unit.get_headphone_volume),
        'mute':     (unit.set_headphone_mute,   unit.get_headphone_mute),
    }
    if len(unit.get_headphone_labels()) == 0:
        print('Not supported')
        return False
    if len(args) > 2:
        headphone = args[0]
        operation = args[1]
        ch = int(args[2])
        if headphone in unit.get_headphone_labels() and operation in ops and \
           ch < 3:
            if len(args) == 4:
                value = int(args[3])
                ops[operation][0](headphone, ch, value)
            else:
                print(ops[operation][1](headphone, ch))
            return True
    print('Arguments for headphone command:')
    print('  target:    [{0}]'.format((', ').join(unit.get_headphone_labels())))
    print('  operation: [{0}]'.format((', ').join(ops)))
    print('  ch:        [0, 1]')
    print('  value:     []')
    return False

def handle_headphone_source(unit, args):
    if len(unit.get_headphone_labels()) == 0:
        print('Not supported')
        return False
    if len(args) > 0:
        headphone = args[0]
        if headphone in unit.get_headphone_labels():
            if len(args) == 2 and \
               args[1] in unit.get_headphone_source_labels():
                source = args[1]
                unit.set_headphone_source(headphone, source)
            else:
                print(unit.get_headphone_source(headphone))
            return True
    print('Arguments for headphone-source command:')
    print('  target: [{0}]'.format(', '.join(unit.get_headphone_labels())))
    print('  source: [{0}]'.format(', '.join(unit.get_headphone_source_labels())))
    return False

def handle_listen_metering(unit, args):
    import time
    import signal
    # This is handled by another context.
    def handle_unix_signal(signum, frame):
        sys.exit()
    signal.signal(signal.SIGINT, handle_unix_signal)
    labels = unit.get_meter_labels()
    while 1:
        # At higher sampling rate, this causes timeout frequently.
        try:
            meters = unit.get_meters()
            for name in sorted(meters):
                print('{0}: {1:08x}'.format(name, meters[name]))
        except Exception as e:
            pass
        print('')
        time.sleep(0.1)
    return True

cmds = {
    'input':                handle_input,
    'aux-input':            handle_aux_input,
    'aux-output':           handle_aux_output,
    'mixer-routing':        handle_mixer_routing,
    'output':               handle_output,
    'output-source':        handle_output_source,
    'headphone':            handle_headphone,
    'headphone-source':     handle_headphone_source,
    'listen-metering':      handle_listen_metering,
}

def dump_commands(unit):
    print('Available commands:')
    for name in cmds.keys():
        print('  {0}'.format(name))

argv = sys.argv
if len(argv) < 2:
    print('help')
    sys.exit()
card = argv[1]

unit = BebobMaudio('/dev/snd/hwC{0}D0'.format(card))
if len(argv) < 3:
    dump_commands(unit)
    sys.exit()
cmd = argv[2]

if cmd in cmds:
    cmds[cmd](unit, argv[3:])
else:
    dump_commands(unit)

